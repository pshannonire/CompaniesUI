{"ast":null,"code":"import { from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n    }\n    intercept(req, next) {\n      // Don't intercept the login request itself\n      if (req.url.endsWith('/api/auth/login')) {\n        return next.handle(req);\n      }\n      return from(this.authService.authenticate()).pipe(switchMap(() => {\n        const token = this.authService.getToken();\n        const tokenType = this.authService.getTokenType();\n        if (token) {\n          const cloned = req.clone({\n            setHeaders: {\n              Authorization: `${tokenType} ${token}`\n            }\n          });\n          return next.handle(cloned);\n        }\n        return next.handle(req);\n      }));\n    }\n    static {\n      this.ɵfac = function AuthInterceptor_Factory(t) {\n        return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthInterceptor,\n        factory: AuthInterceptor.ɵfac\n      });\n    }\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}